[
{
  "id": "deprecated/bower-api",
  "title": "Bower API",
  "url": "/deprecated/bower-api",
  "category": "JavaScript libraries",
  "keywords": null,
  "content_html": "<pre><code class=\"language-js\">require('bower').config\n</code></pre>\n\n<pre><code class=\"language-js\">{ cwd: '/Users/rsc',\n  directory: 'bower_components',\n  registry:\n   { search: [ 'https://bower.herokuapp.com' ],\n     register: 'https://bower.herokuapp.com',\n     publish: 'https://bower.herokuapp.com' },\n  shorthandResolver: 'git://github.com//.git',\n  tmp: '/var/folders/5y/190gjd_j2c5bfkn563dk2xdr0000gn/T/rsc/bower',\n  timeout: 30000,\n  ca: { search: [] },\n  strictSsl: true,\n  userAgent: 'node/v0.10.33 darwin x64',\n  color: true,\n  storage:\n   { packages: '/Users/rsc/.cache/bower/packages',\n     links: '/Users/rsc/.local/share/bower/links',\n     completion: '/Users/rsc/.local/share/bower/completion',\n     registry: '/Users/rsc/.cache/bower/registry',\n     empty: '/Users/rsc/.local/share/bower/empty' },\n  interactive: false,\n  argv: { remain: [], cooked: [], original: [] } }\n</code></pre>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "c_preprocessor",
  "title": "C Preprocessor",
  "url": "/c_preprocessor",
  "category": "C-like",
  "keywords": null,
  "content_html": "<h2 class=\"-three-column\" id=\"reference\">Reference</h2>\n\n<h3 id=\"compiling\">Compiling</h3>\n\n<pre><code>$ cpp -P file &gt; outfile\n</code></pre>\n\n<h3 id=\"includes\">Includes</h3>\n\n<pre><code>#include \"file\"\n</code></pre>\n\n<h3 id=\"defines\">Defines</h3>\n\n<pre><code>#define FOO\n#define FOO \"hello\"\n\n#undef FOO\n</code></pre>\n\n<h3 id=\"if\">If</h3>\n\n<pre><code>#ifdef DEBUG\n  console.log('hi');\n#elif defined VERBOSE\n  ...\n#else\n  ...\n#endif\n</code></pre>\n\n<h3 id=\"error\">Error</h3>\n\n<pre><code>#if VERSION == 2.0\n  #error Unsupported\n  #warning Not really supported\n#endif\n</code></pre>\n\n<h3 id=\"macro\">Macro</h3>\n\n<pre><code>#define DEG(x) ((x) * 57.29)\n</code></pre>\n\n<h3 id=\"token-concat\">Token concat</h3>\n\n<pre><code>#define DST(name) name##_s name##_t\nDST(object);   #=&gt; object_s object_t;\n</code></pre>\n\n<h3 id=\"stringification\">Stringification</h3>\n\n<pre><code>#define STR(name) #name\nchar * a = STR(object);   #=&gt; char * a = \"object\";\n</code></pre>\n\n<h3 id=\"file-and-line\">file and line</h3>\n\n<pre><code>#define LOG(msg) console.log(__FILE__, __LINE__, msg)\n#=&gt; console.log(\"file.txt\", 3, \"hey\")\n</code></pre>",
  "intro_html": "<p>Quick reference for the <a href=\"https://en.m.wikipedia.org/wiki/C_preprocessor\">C macro preprocessor</a>, which can be used independent of C/C++.</p>",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "docker",
  "title": "Docker CLI",
  "url": "/docker",
  "category": "Devops",
  "keywords": null,
  "content_html": "<h2 id=\"manage-images\">Manage images</h2>\n\n<h3 id=\"docker-build\"><code>docker build</code></h3>\n\n<pre><code class=\"language-yml\">docker build [options] .\n  -t \"app/container_name\"    # name\n  --build-arg APP_HOME=$APP_HOME    # Set build-time variables\n</code></pre>\n\n<p>Create an <code>image</code> from a Dockerfile.</p>\n\n<h3 id=\"docker-run\"><code>docker run</code></h3>\n\n<pre><code class=\"language-yml\">docker run [options] IMAGE\n  # see `docker create` for options\n</code></pre>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>$ docker run -it debian:buster /bin/bash\n</code></pre>\n<p>Run a command in an <code>image</code>.</p>\n\n<h2 id=\"manage-containers\">Manage containers</h2>\n\n<h3 id=\"docker-create\"><code>docker create</code></h3>\n\n<pre><code class=\"language-yml\">docker create [options] IMAGE\n  -a, --attach               # attach stdout/err\n  -i, --interactive          # attach stdin (interactive)\n  -t, --tty                  # pseudo-tty\n      --name NAME            # name your image\n  -p, --publish 5000:5000    # port map (host:container)\n      --expose 5432          # expose a port to linked containers\n  -P, --publish-all          # publish all ports\n      --link container:alias # linking\n  -v, --volume `pwd`:/app    # mount (absolute paths needed)\n  -e, --env NAME=hello       # env vars\n</code></pre>\n\n<h4 id=\"example-1\">Example</h4>\n\n<pre><code>$ docker create --name app_redis_1 \\\n  --expose 6379 \\\n  redis:3.0.2\n</code></pre>\n\n<p>Create a <code>container</code> from an <code>image</code>.</p>\n\n<h3 id=\"docker-exec\"><code>docker exec</code></h3>\n\n<pre><code class=\"language-yml\">docker exec [options] CONTAINER COMMAND\n  -d, --detach        # run in background\n  -i, --interactive   # stdin\n  -t, --tty           # interactive\n</code></pre>\n\n<h4 id=\"example-2\">Example</h4>\n\n<pre><code>$ docker exec app_web_1 tail logs/development.log\n$ docker exec -t -i app_web_1 rails c\n</code></pre>\n\n<p>Run commands in a <code>container</code>.</p>\n\n<h3 id=\"docker-start\"><code>docker start</code></h3>\n\n<pre><code class=\"language-yml\">docker start [options] CONTAINER\n  -a, --attach        # attach stdout/err\n  -i, --interactive   # attach stdin\n\ndocker stop [options] CONTAINER\n</code></pre>\n\n<p>Start/stop a <code>container</code>.</p>\n\n<h3 id=\"docker-ps\"><code>docker ps</code></h3>\n\n<pre><code>$ docker ps\n$ docker ps -a\n$ docker kill $ID\n</code></pre>\n\n<p>Manage <code>container</code>s using ps/kill.</p>\n\n<h3 id=\"docker-logs\"><code>docker logs</code></h3>\n\n<pre><code>$ docker logs $ID\n$ docker logs $ID 2&gt;&amp;1 | less\n$ docker logs -f $ID # Follow log output\n</code></pre>\n\n<p>See what’s being logged in an <code>container</code>.</p>\n\n<h2 id=\"images\">Images</h2>\n\n<h3 id=\"docker-images\"><code>docker images</code></h3>\n\n<pre><code class=\"language-sh\">$ docker images\n  REPOSITORY   TAG        ID\n  ubuntu       12.10      b750fe78269d\n  me/myapp     latest     7b2431a8d968\n</code></pre>\n\n<pre><code class=\"language-sh\">$ docker images -a   # also show intermediate\n</code></pre>\n\n<p>Manages <code>image</code>s.</p>\n\n<h3 id=\"docker-rmi\"><code>docker rmi</code></h3>\n\n<pre><code class=\"language-yml\">docker rmi b750fe78269d\n</code></pre>\n\n<p>Deletes <code>image</code>s.</p>\n\n<h2 id=\"clean-up\">Clean up</h2>\n\n<h3 id=\"clean-all\">Clean all</h3>\n\n<pre><code class=\"language-sh\">docker system prune\n</code></pre>\n\n<p>Cleans up dangling images, containers, volumes, and networks (ie, not associated with a container)</p>\n\n<pre><code class=\"language-sh\">docker system prune -a\n</code></pre>\n\n<p>Additionally remove any stopped containers and all unused images (not just dangling images)</p>\n\n<h3 id=\"containers\">Containers</h3>\n\n<pre><code class=\"language-sh\"># Stop all running containers\ndocker stop $(docker ps -a -q)\n\n# Delete stopped containers\ndocker container prune\n</code></pre>\n\n<h3 id=\"images-1\">Images</h3>\n\n<pre><code class=\"language-sh\">docker image prune [-a]\n</code></pre>\n\n<p>Delete all the images</p>\n\n<h3 id=\"volumes\">Volumes</h3>\n\n<pre><code class=\"language-sh\">docker volume prune\n</code></pre>\n\n<p>Delete all the volumes</p>\n\n<h2 id=\"also-see\">Also see</h2>\n\n<ul>\n  <li><a href=\"http://www.docker.io/gettingstarted/\">Getting Started</a> <em>(docker.io)</em></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "fitness/general",
  "title": "General fitness notes",
  "url": "/fitness/general",
  "category": "Fitness",
  "keywords": null,
  "content_html": "<h3 id=\"target-heart-rate\">Target heart rate</h3>\n\n<pre><code>max heart rate = (220 - age)\n</code></pre>\n\n<p>“The target heart rate method is a simple formula: take 220 and minus your age.\nThen take that number and multiply it by .75 - .85, which will give you your\npercentages of 75% – 85% of your Max. HR.”</p>\n\n<p>See: <a href=\"http://www.bodybuilding.com/fun/mike1.htm\">http://www.bodybuilding.com/fun/mike1.htm</a></p>\n\n<h3 id=\"warmup-sets\">Warmup sets</h3>\n\n<ul>\n  <li>5 x Bar</li>\n  <li>5 x 60%</li>\n  <li>3 x 70%</li>\n  <li>2 x 80%</li>\n  <li>5 x 100% (work set)</li>\n</ul>\n\n<p>See: <a href=\"http://corw.in/warmup/\">http://corw.in/warmup/</a></p>\n\n<h3 id=\"bench\">Bench</h3>\n\n<p>Jennifer Thompson video: <a href=\"http://www.youtube.com/watch?v=34XRmd3a8_0\">http://www.youtube.com/watch?v=34XRmd3a8_0</a></p>\n\n<h3 id=\"metabolism\">Metabolism</h3>\n\n<ul>\n  <li>\n    <p>At rest, 33% of the body’s energy comes from carbohydrates, or glycogen, \nstored within the muscles and liver. 66% comes from fat.</p>\n  </li>\n  <li>\n    <p>During aerobic work, 50-60% of the energy comes from fats</p>\n  </li>\n  <li>\n    <p>Primarily carbohydrates are used during the first several minutes of exercise</p>\n  </li>\n  <li>\n    <p>For an average fit person, it takes 20 to 30 minutes of continuous aerobic \nactivity to burn 50% fat and 50% carbohydrate</p>\n  </li>\n  <li>\n    <p>There is approximately a 7 fold increase of fat mobilization after 1 hour of \nexercise</p>\n  </li>\n  <li>\n    <p>Low intense exercise (less than 30% VO2 max) relies primarily on fat whereas \nhigh intense exercise (greater than 70% VO2 max) primarily utilized \ncarbohydrate.</p>\n  </li>\n</ul>\n\n<p>See: <a href=\"http://www.exrx.net/Nutrition/Substrates.html\">Substrates</a> <em>(exrx.net)</em></p>\n\n<h3 id=\"deloads-on-a-cut\">Deloads on a cut</h3>\n\n<ul>\n  <li>\n    <p>“I would never recommend traditional style deloads on a cut, regardless of \n training regimen.”</p>\n  </li>\n  <li>\n    <p>“increase the rest day interval between sessions”</p>\n  </li>\n</ul>\n\n<p>See: <a href=\"https://www.facebook.com/permalink.php?story_fbid=273265046115238&amp;id=116211138487297&amp;comment_id=1262284&amp;offset=0&amp;total_comments=34\">Link</a> <em>(facebook.com)</em></p>\n\n<h3 id=\"conditioning-with-531\">Conditioning with 5/3/1</h3>\n\n<ul>\n  <li>“For conditioning, I highly recommend 30-40 minutes of walking every day.<br />\n Yes,  walking. If you’re asking why something so non-strenuous: if physique \n goals are your only concern, do not let the conditioning take away from your \n recovery.”</li>\n</ul>\n\n<p>See: <a href=\"http://www.jimwendler.com/2012/09/531-and-bodybuilding/\">531 and Bodybuilding</a> <em>(jimwendler.com)</em></p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "go",
  "title": "Go",
  "url": "/go",
  "category": "C-like",
  "keywords": null,
  "content_html": "<h2 class=\"-three-column\" id=\"getting-started\">Getting started</h2>\n\n<h3 class=\"-intro\" id=\"introduction\">Introduction</h3>\n\n<ul>\n  <li><a href=\"https://tour.golang.org/welcome/1\">A tour of Go</a> <em>(tour.golang.org)</em></li>\n  <li><a href=\"https://repl.it/languages/go\">Go repl</a> <em>(repl.it)</em></li>\n  <li><a href=\"https://github.com/golang/go/wiki/\">Golang wiki</a> <em>(github.com)</em></li>\n</ul>\n\n<h3 class=\"-prime\" id=\"hello-world\">Hello world</h3>\n\n<h4 class=\"-file\" id=\"hellogo\">hello.go</h4>\n\n<pre><code class=\"language-go\">package main\n\nimport \"fmt\"\n\nfunc main() {\n  message := greetMe(\"world\")\n  fmt.Println(message)\n}\n\nfunc greetMe(name string) string {\n  return \"Hello, \" + name + \"!\"\n}\n</code></pre>\n\n<pre><code class=\"language-bash\">$ go build\n</code></pre>\n\n<p>Or try it out in the <a href=\"https://repl.it/languages/go\">Go repl</a>, or <a href=\"https://tour.golang.org/welcome/1\">A Tour of Go</a>.</p>\n\n<h3 id=\"variables\">Variables</h3>\n\n<h4 id=\"variable-declaration\">Variable declaration</h4>\n\n<pre><code class=\"language-go\">var msg string\nmsg = \"Hello\"\n</code></pre>\n\n<h4 id=\"shortcut-of-above-infers-type\">Shortcut of above (Infers type)</h4>\n\n<pre><code class=\"language-go\">msg := \"Hello\"\n</code></pre>\n\n<h3 id=\"constants\">Constants</h3>\n\n<pre><code class=\"language-go\">const Phi = 1.618\n</code></pre>\n\n<p>Constants can be character, string, boolean, or numeric values.</p>\n\n<p>See: <a href=\"https://tour.golang.org/basics/15\">Constants</a></p>\n\n<h2 class=\"-three-column\" id=\"basic-types\">Basic types</h2>\n\n<h3 id=\"strings\">Strings</h3>\n\n<pre><code class=\"language-go\">str := \"Hello\"\n</code></pre>\n\n<pre><code class=\"language-go\">str := `Multiline\nstring`\n</code></pre>\n\n<p>Strings are of type <code>string</code>.</p>\n\n<h3 id=\"numbers\">Numbers</h3>\n\n<h4 id=\"typical-types\">Typical types</h4>\n\n<pre><code class=\"language-go\">num := 3          // int\nnum := 3.         // float64\nnum := 3 + 4i     // complex128\nnum := byte('a')  // byte (alias for uint8)\n</code></pre>\n\n<h4 id=\"other-types\">Other types</h4>\n\n<pre><code class=\"language-go\">var u uint = 7        // uint (unsigned)\nvar p float32 = 22.7  // 32-bit float\n</code></pre>\n\n<h3 id=\"arrays\">Arrays</h3>\n\n<pre><code class=\"language-go\">// var numbers [5]int\nnumbers := [...]int{0, 0, 0, 0, 0}\n</code></pre>\n\n<p>Arrays have a fixed size.</p>\n\n<h3 id=\"slices\">Slices</h3>\n\n<pre><code class=\"language-go\">slice := []int{2, 3, 4}\n</code></pre>\n\n<pre><code class=\"language-go\">slice := []byte(\"Hello\")\n</code></pre>\n\n<p>Slices have a dynamic size, unlike arrays.</p>\n\n<h3 id=\"pointers\">Pointers</h3>\n\n<pre data-line=\"2\"><code class=\"language-go\">func main () {\n  b := *getPointer()\n  fmt.Println(\"Value is\", b)\n}\n</code></pre>\n\n<pre data-line=\"3\"><code class=\"language-go\">func getPointer () (myPointer *int) {\n  a := 234\n  return &amp;a\n}\n</code></pre>\n\n<pre data-line=\"2\"><code class=\"language-go\">a := new(int)\n*a = 234\n</code></pre>\n\n<p>Pointers point to a memory location of a variable. Go is fully garbage-collected.</p>\n\n<p>See: <a href=\"https://tour.golang.org/moretypes/1\">Pointers</a></p>\n\n<h3 id=\"type-conversions\">Type conversions</h3>\n\n<pre><code class=\"language-go\">i := 2\nf := float64(i)\nu := uint(i)\n</code></pre>\n\n<p>See: <a href=\"https://tour.golang.org/basics/13\">Type conversions</a></p>\n\n<h2 class=\"-three-column\" id=\"flow-control\">Flow control</h2>\n\n<h3 id=\"conditional\">Conditional</h3>\n\n<pre data-line=\"1,3,5\"><code class=\"language-go\">if day == \"sunday\" || day == \"saturday\" {\n  rest()\n} else if day == \"monday\" &amp;&amp; isTired() {\n  groan()\n} else {\n  work()\n}\n</code></pre>\n\n<p>See: <a href=\"https://tour.golang.org/flowcontrol/5\">If</a></p>\n\n<h3 id=\"statements-in-if\">Statements in if</h3>\n\n<pre data-line=\"1\"><code class=\"language-go\">if _, err := doThing(); err != nil {\n  fmt.Println(\"Uh oh\")\n}\n</code></pre>\n\n<p>A condition in an <code>if</code> statement can be preceded with a statement before a <code>;</code>. Variables declared by the statement are only in scope until the end of the <code>if</code>.</p>\n\n<p>See: <a href=\"https://tour.golang.org/flowcontrol/6\">If with a short statement</a></p>\n\n<h3 id=\"switch\">Switch</h3>\n\n<pre><code class=\"language-go\">switch day {\n  case \"sunday\":\n    // cases don't \"fall through\" by default!\n    fallthrough\n\n  case \"saturday\":\n    rest()\n\n  default:\n    work()\n}\n</code></pre>\n\n<p>See: <a href=\"https://github.com/golang/go/wiki/Switch\">Switch</a></p>\n\n<h3 id=\"for-loop\">For loop</h3>\n\n<pre><code class=\"language-go\">for count := 0; count &lt;= 10; count++ {\n  fmt.Println(\"My counter is at\", count)\n}\n</code></pre>\n\n<p>See: <a href=\"https://tour.golang.org/flowcontrol/1\">For loops</a></p>\n\n<h3 id=\"for-range-loop\">For-Range loop</h3>\n\n<pre><code class=\"language-go\">entry := []string{\"Jack\",\"John\",\"Jones\"}\nfor i, val := range entry {\n  fmt.Printf(\"At position %d, the character %s is present\\n\", i, val)\n}\n</code></pre>\n\n<p>See: <a href=\"https://gobyexample.com/range\">For-Range loops</a></p>\n\n<h3 id=\"while-loop\">While loop</h3>\n\n<pre><code class=\"language-go\">n := 0\nx := 42\nfor n != x {\n  n := guess()\n}\n</code></pre>\n\n<p>See: <a href=\"https://tour.golang.org/flowcontrol/3\">Go’s “while”</a></p>\n\n<h2 class=\"-three-column\" id=\"functions\">Functions</h2>\n\n<h3 id=\"lambdas\">Lambdas</h3>\n\n<pre data-line=\"1\"><code class=\"language-go\">myfunc := func() bool {\n  return x &gt; 10000\n}\n</code></pre>\n\n<p>Functions are first class objects.</p>\n\n<h3 id=\"multiple-return-types\">Multiple return types</h3>\n\n<pre><code class=\"language-go\">a, b := getMessage()\n</code></pre>\n\n<pre data-line=\"2\"><code class=\"language-go\">func getMessage() (a string, b string) {\n  return \"Hello\", \"World\"\n}\n</code></pre>\n\n<h3 id=\"named-return-values\">Named return values</h3>\n\n<pre data-line=\"4\"><code class=\"language-go\">func split(sum int) (x, y int) {\n  x = sum * 4 / 9\n  y = sum - x\n  return\n}\n</code></pre>\n\n<p>By defining the return value names in the signature, a <code>return</code> (no args) will return variables with those names.</p>\n\n<p>See: <a href=\"https://tour.golang.org/basics/7\">Named return values</a></p>\n\n<h2 class=\"-three-column\" id=\"packages\">Packages</h2>\n\n<h3 id=\"importing\">Importing</h3>\n\n<pre><code class=\"language-go\">import \"fmt\"\nimport \"math/rand\"\n</code></pre>\n\n<pre><code class=\"language-go\">import (\n  \"fmt\"        // gives fmt.Println\n  \"math/rand\"  // gives rand.Intn\n)\n</code></pre>\n\n<p>Both are the same.</p>\n\n<p>See: <a href=\"https://tour.golang.org/basics/1\">Importing</a></p>\n\n<h3 id=\"aliases\">Aliases</h3>\n\n<pre data-line=\"1\"><code class=\"language-go\">import r \"math/rand\"\n</code></pre>\n\n<pre><code class=\"language-go\">r.Intn()\n</code></pre>\n\n<h3 id=\"exporting-names\">Exporting names</h3>\n\n<pre><code class=\"language-go\">func Hello () {\n  ···\n}\n</code></pre>\n\n<p>Exported names begin with capital letters.</p>\n\n<p>See: <a href=\"https://tour.golang.org/basics/3\">Exported names</a></p>\n\n<h3 id=\"packages-1\">Packages</h3>\n\n<pre><code class=\"language-go\">package hello\n</code></pre>\n\n<p>Every package file has to start with <code>package</code>.</p>\n\n<h2 class=\"-three-column\" id=\"concurrency\">Concurrency</h2>\n\n<h3 id=\"goroutines\">Goroutines</h3>\n\n<pre data-line=\"3,6,7,8,13\"><code class=\"language-go\">func main() {\n  // A \"channel\"\n  ch := make(chan string)\n\n  // Start concurrent routines\n  go push(\"Moe\", ch)\n  go push(\"Larry\", ch)\n  go push(\"Curly\", ch)\n\n  // Read 3 results\n  // (Since our goroutines are concurrent,\n  // the order isn't guaranteed!)\n  fmt.Println(&lt;-ch, &lt;-ch, &lt;-ch)\n}\n</code></pre>\n\n<pre data-line=\"3\"><code class=\"language-go\">func push(name string, ch chan string) {\n  msg := \"Hey, \" + name\n  ch &lt;- msg\n}\n</code></pre>\n\n<p>Channels are concurrency-safe communication objects, used in goroutines.</p>\n\n<p>See: <a href=\"https://tour.golang.org/concurrency/1\">Goroutines</a>, <a href=\"https://tour.golang.org/concurrency/2\">Channels</a></p>\n\n<h3 id=\"buffered-channels\">Buffered channels</h3>\n\n<pre data-line=\"1\"><code class=\"language-go\">ch := make(chan int, 2)\nch &lt;- 1\nch &lt;- 2\nch &lt;- 3\n// fatal error:\n// all goroutines are asleep - deadlock!\n</code></pre>\n\n<p>Buffered channels limit the amount of messages it can keep.</p>\n\n<p>See: <a href=\"https://tour.golang.org/concurrency/3\">Buffered channels</a></p>\n\n<h3 id=\"closing-channels\">Closing channels</h3>\n\n<h4 id=\"closes-a-channel\">Closes a channel</h4>\n\n<pre data-line=\"4\"><code class=\"language-go\">ch &lt;- 1\nch &lt;- 2\nch &lt;- 3\nclose(ch)\n</code></pre>\n\n<h4 id=\"iterates-across-a-channel-until-its-closed\">Iterates across a channel until its closed</h4>\n\n<pre data-line=\"1\"><code class=\"language-go\">for i := range ch {\n  ···\n}\n</code></pre>\n\n<h4 id=\"closed-if-ok--false\">Closed if <code>ok == false</code></h4>\n\n<pre><code class=\"language-go\">v, ok := &lt;- ch\n</code></pre>\n\n<p>See: <a href=\"https://tour.golang.org/concurrency/4\">Range and close</a></p>\n\n<h3 id=\"waitgroup\">WaitGroup</h3>\n\n<pre data-line=\"1,4,8,12\"><code class=\"language-go\">import \"sync\"\n\nfunc main() {\n  var wg sync.WaitGroup\n  \n  for _, item := range itemList {\n    // Increment WaitGroup Counter\n    wg.Add(1)\n    go doOperation(item)\n  }\n  // Wait for goroutines to finish\n  wg.Wait()\n  \n}\n</code></pre>\n\n<pre data-line=\"2\"><code class=\"language-go\">func doOperation(item string) {\n  defer wg.Done()\n  // do operation on item\n  // ...\n}\n</code></pre>\n\n<p>A WaitGroup waits for a collection of goroutines to finish. The main goroutine calls Add to set the number of goroutines to wait for. The goroutine calls <code>wg.Done()</code> when it finishes.\nSee: <a href=\"https://golang.org/pkg/sync/#WaitGroup\">WaitGroup</a></p>\n\n<h2 id=\"error-control\">Error control</h2>\n\n<h3 id=\"defer\">Defer</h3>\n\n<pre data-line=\"2\"><code class=\"language-go\">func main() {\n  defer fmt.Println(\"Done\")\n  fmt.Println(\"Working...\")\n}\n</code></pre>\n\n<p>Defers running a function until the surrounding function returns.\nThe arguments are evaluated immediately, but the function call is not ran until later.</p>\n\n<p>See: <a href=\"https://blog.golang.org/defer-panic-and-recover\">Defer, panic and recover</a></p>\n\n<h3 id=\"deferring-functions\">Deferring functions</h3>\n\n<pre data-line=\"2,3,4\"><code class=\"language-go\">func main() {\n  defer func() {\n    fmt.Println(\"Done\")\n  }()\n  fmt.Println(\"Working...\")\n}\n</code></pre>\n\n<p>Lambdas are better suited for defer blocks.</p>\n\n<pre data-line=\"3,4,5\"><code class=\"language-go\">func main() {\n  var d = int64(0)\n  defer func(d *int64) {\n    fmt.Printf(\"&amp; %v Unix Sec\\n\", *d)\n  }(&amp;d)\n  fmt.Print(\"Done \")\n  d = time.Now().Unix()\n}\n</code></pre>\n<p>The defer func uses current value of d, unless we use a pointer to get final value at end of main.</p>\n\n<h2 class=\"-three-column\" id=\"structs\">Structs</h2>\n\n<h3 id=\"defining\">Defining</h3>\n\n<pre data-line=\"1,2,3,4\"><code class=\"language-go\">type Vertex struct {\n  X int\n  Y int\n}\n</code></pre>\n\n<pre><code class=\"language-go\">func main() {\n  v := Vertex{1, 2}\n  v.X = 4\n  fmt.Println(v.X, v.Y)\n}\n</code></pre>\n\n<p>See: <a href=\"https://tour.golang.org/moretypes/2\">Structs</a></p>\n\n<h3 id=\"literals\">Literals</h3>\n\n<pre><code class=\"language-go\">v := Vertex{X: 1, Y: 2}\n</code></pre>\n\n<pre><code class=\"language-go\">// Field names can be omitted\nv := Vertex{1, 2}\n</code></pre>\n\n<pre><code class=\"language-go\">// Y is implicit\nv := Vertex{X: 1}\n</code></pre>\n\n<p>You can also put field names.</p>\n\n<h3 id=\"pointers-to-structs\">Pointers to structs</h3>\n\n<pre><code class=\"language-go\">v := &amp;Vertex{1, 2}\nv.X = 2\n</code></pre>\n\n<p>Doing <code>v.X</code> is the same as doing <code>(*v).X</code>, when <code>v</code> is a pointer.</p>\n\n<h2 id=\"methods\">Methods</h2>\n\n<h3 id=\"receivers\">Receivers</h3>\n\n<pre><code class=\"language-go\">type Vertex struct {\n  X, Y float64\n}\n</code></pre>\n\n<pre data-line=\"1\"><code class=\"language-go\">func (v Vertex) Abs() float64 {\n  return math.Sqrt(v.X * v.X + v.Y * v.Y)\n}\n</code></pre>\n\n<pre><code class=\"language-go\">v := Vertex{1, 2}\nv.Abs()\n</code></pre>\n\n<p>There are no classes, but you can define functions with <em>receivers</em>.</p>\n\n<p>See: <a href=\"https://tour.golang.org/methods/1\">Methods</a></p>\n\n<h3 id=\"mutation\">Mutation</h3>\n\n<pre data-line=\"1\"><code class=\"language-go\">func (v *Vertex) Scale(f float64) {\n  v.X = v.X * f\n  v.Y = v.Y * f\n}\n</code></pre>\n\n<pre><code class=\"language-go\">v := Vertex{6, 12}\nv.Scale(0.5)\n// `v` is updated\n</code></pre>\n\n<p>By defining your receiver as a pointer (<code>*Vertex</code>), you can do mutations.</p>\n\n<p>See: <a href=\"https://tour.golang.org/methods/4\">Pointer receivers</a></p>\n\n<h2 id=\"interfaces\">Interfaces</h2>\n\n<h3 id=\"a-basic-interface\">A basic interface</h3>\n\n<pre><code class=\"language-go\">type Shape interface {\n  Area() float64\n  Perimeter() float64\n}\n</code></pre>\n\n<h3 id=\"struct\">Struct</h3>\n\n<pre><code class=\"language-go\">type Rectangle struct {\n  Length, Width float64\n}\n</code></pre>\n\n<p>Struct <code>Rectangle</code> implicitly implements interface <code>Shape</code> by implementing all of its methods.</p>\n\n<h3 id=\"methods-1\">Methods</h3>\n\n<pre><code class=\"language-go\">func (r Rectangle) Area() float64 {\n  return r.Length * r.Width\n}\n\nfunc (r Rectangle) Perimeter() float64 {\n  return 2 * (r.Length + r.Width)\n}\n</code></pre>\n\n<p>The methods defined in <code>Shape</code> are implemented in <code>Rectangle</code>.</p>\n\n<h3 id=\"interface-example\">Interface example</h3>\n\n<pre><code class=\"language-go\">func main() {\n  var r Shape = Rectangle{Length: 3, Width: 4}\n  fmt.Printf(\"Type of r: %T, Area: %v, Perimeter: %v.\", r, r.Area(), r.Perimeter())\n}\n</code></pre>\n\n<h2 id=\"references\">References</h2>\n\n<h3 class=\"-intro\" id=\"official-resources\">Official resources</h3>\n\n<ul>\n  <li><a href=\"https://tour.golang.org/welcome/1\">A tour of Go</a> <em>(tour.golang.org)</em></li>\n  <li><a href=\"https://github.com/golang/go/wiki/\">Golang wiki</a> <em>(github.com)</em></li>\n  <li><a href=\"https://golang.org/doc/effective_go.html\">Effective Go</a> <em>(golang.org)</em></li>\n</ul>\n\n<h3 class=\"-intro\" id=\"other-links\">Other links</h3>\n\n<ul>\n  <li><a href=\"https://gobyexample.com/\">Go by Example</a> <em>(gobyexample.com)</em></li>\n  <li><a href=\"https://awesome-go.com/\">Awesome Go</a> <em>(awesome-go.com)</em></li>\n  <li><a href=\"https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw\">JustForFunc Youtube</a> <em>(youtube.com)</em></li>\n  <li><a href=\"https://github.com/golang/go/wiki/CodeReviewComments\">Style Guide</a> <em>(github.com)</em></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2020-06-21"
},{
  "id": "wip/intl-datetime",
  "title": "Intl.DateTimeFormat",
  "url": "/wip/intl-datetime",
  "category": "Hidden",
  "keywords": null,
  "content_html": "<h3 id=\"parsing\">Parsing</h3>\n\n<h4 id=\"as-local-time\">As local time</h4>\n\n<pre><code class=\"language-js\">const date = new Date(2012, 11, 20, 3, 0, 0)\n</code></pre>\n\n<h4 id=\"as-utc-time\">As UTC time</h4>\n\n<pre><code class=\"language-js\">const date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0))\n</code></pre>\n\n<h4 id=\"from-iso-strings\">From ISO strings</h4>\n\n<pre><code class=\"language-js\">const date = new Date('2018-04-20T12:00:00Z')\n</code></pre>\n\n<p>Note that JavaScript doesn’t “store” timezones in a date object. All these date objects, when expressed via <code>.toString()</code> or similar, will show the local timezone of the browser, regardless if you parsed UTC dates.</p>\n\n<h3 id=\"formatting-dates\">Formatting dates</h3>\n\n<h4 id=\"default-formatting\">Default formatting</h4>\n\n<pre><code class=\"language-js\">console.log(new Intl.DateTimeFormat().format(date))\n// → '12/19/2012' (assuming America/Los_Angeles)\n</code></pre>\n\n<h4 id=\"custom-locale\">Custom locale</h4>\n\n<pre><code class=\"language-js\">console.log(new Intl.DateTimeFormat('en-GB').format(date))\n// → '19/12/2012' (date-first)\n</code></pre>\n\n<h4 id=\"custom-timezone\">Custom timezone</h4>\n\n<pre><code class=\"language-js\">console.log(new Intl.DateTimeFormat('en-AU', {\n  timeZone: 'Australia/Sydney'\n}).format(date))\n// → '19/12/2012'\n</code></pre>\n\n<h3 id=\"custom-formats\">Custom formats</h3>\n\n<h4 id=\"time\">Time</h4>\n\n<pre><code class=\"language-js\">console.log(new Intl.DateTimeFormat('default', {\n  hour: 'numeric',\n  minute: 'numeric',\n  second: 'numeric'\n}).format(date))\n// → '2:00:00 pm'\n</code></pre>\n\n<h4 id=\"date\">Date</h4>\n\n<pre><code class=\"language-js\">console.log(new Intl.DateTimeFormat('en-US', {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric'\n}).format(date))\n// → '12/19/2012'\n</code></pre>\n\n<p>To specify options without a locale, use <code>'default'</code> as a locale.</p>\n\n<h3 id=\"all-options\">All options</h3>\n\n<pre><code class=\"language-js\">{\n  weekday: 'narrow' | 'short' | 'long',\n  era: 'narrow' | 'short' | 'long',\n  year: 'numeric' | '2-digit',\n  month: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long',\n  day: 'numeric' | '2-digit',\n  hour: 'numeric' | '2-digit',\n  minute: 'numeric' | '2-digit',\n  second: 'numeric' | '2-digit',\n  timeZoneName: 'short' | 'long',\n\n  // Time zone to express it in\n  timeZone: 'Asia/Shanghai',\n  // Force 12-hour or 24-hour\n  hour12: true | false,\n\n  // Rarely-used options\n  hourCycle: 'h11' | 'h12' | 'h23' | 'h24',\n  formatMatcher: 'basic' | 'best fit'\n}\n</code></pre>\n\n<h2 id=\"references\">References</h2>\n\n<ul>\n  <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat</a></li>\n</ul>",
  "intro_html": "<p><code>Intl.DateTimeFormat</code> is used to format date strings in JavaScript.</p>",
  "description_html": "",
  "tags": ["WIP"],
  "updated": null
},{
  "id": "fitness/micronutrients",
  "title": "Essential micronutrients",
  "url": "/fitness/micronutrients",
  "category": "Fitness",
  "keywords": null,
  "content_html": "<h2 class=\"-three-column\" id=\"vitamins\">Vitamins</h2>\n\n<h3 id=\"vitamin-d\">Vitamin D</h3>\n\n<ul>\n  <li>Sources: sunlight, fish/eggs</li>\n  <li>Dosage: 2000iu daily (10,000iu max)</li>\n  <li>Major benefits: test boost</li>\n  <li>Fat-soluble</li>\n  <li>Best taken with meals or a source of fat</li>\n</ul>\n\n<p>See: <a href=\"http://examine.com/supplements/Vitamin+D/\">Examine.com</a></p>\n\n<h3 id=\"zinc\">Zinc</h3>\n\n<ul>\n  <li>Sources: meat, egg, legumes</li>\n  <li>Major benefits: test boost, immune boost</li>\n  <li>Doesn’t go well with <a href=\"#iron\">Iron</a>, <a href=\"#magnesium\">Magnesium</a></li>\n  <li>Dosage: 5-10mg daily</li>\n</ul>\n\n<p>See: <a href=\"http://examine.com/supplements/Zinc/\">Examine.com</a></p>\n\n<h3 id=\"magnesium\">Magnesium</h3>\n\n<ul>\n  <li>Sources: grains, nuts, leafy vegetables</li>\n  <li>Dosage: 200-450mg daily</li>\n  <li>Major benefits: lower blood glucose, sleep, insulin sensitivity</li>\n  <li>Don’t get Magnesium Oxide (low bioavailability), get Magnesium Citrate</li>\n</ul>\n\n<p>See: <a href=\"http://examine.com/supplements/Magnesium/\">Examine.com</a></p>\n\n<h3 id=\"selenium\">Selenium</h3>\n\n<ul>\n  <li>Sources: nuts, fish (tuna, halibut), meat</li>\n  <li>Major benefits: anti-oxidant, anti-cancer</li>\n  <li>Dosage: 200-300ug daily</li>\n</ul>\n\n<p>See: <a href=\"http://examine.com/supplements/Selenium/\">Examine.com</a></p>\n\n<h3 id=\"vitamin-e\">Vitamin E</h3>\n\n<ul>\n  <li>Sources: Nuts, needs, veg oils, leafy veggies</li>\n  <li>Major benefits: anti-oxidant, skin</li>\n  <li>Dosage: up to 22IU daily for adults? (RDA)</li>\n  <li>Fat-soluble</li>\n</ul>\n\n<p>See: <a href=\"http://ods.od.nih.gov/factsheets/VitaminE-HealthProfessional/\">nih.gov</a></p>\n\n<h3 id=\"vitamin-c\">Vitamin C</h3>\n\n<ul>\n  <li>Sources: fruits (esp citrus), leafy veggies</li>\n  <li>Dosage: 75mg daily (females), 90mg (males)</li>\n  <li>Major benefits: anti-oxidant</li>\n</ul>\n\n<p>See: <a href=\"http://examine.com/supplements/Vitamin+C/\">Examine.com</a></p>\n\n<h3 id=\"vitamin-k\">Vitamin K</h3>\n\n<ul>\n  <li>Sources: beans (legumes), green tea, veggies (mostly leafy), egg yolk,\n chicken thigh</li>\n  <li>Major benefits: bone health</li>\n  <li>Fat-soluble</li>\n</ul>\n\n<p>See: <a href=\"http://examine.com/supplements/Vitamin+K/\">Examine.com</a></p>\n\n<h3 id=\"thiamin-vitamin-b1\">Thiamin (Vitamin B1)</h3>\n\n<ul>\n  <li>···</li>\n</ul>\n\n<h3 id=\"riboflavin-vitamin-b2\">Riboflavin (Vitamin B2)</h3>\n\n<ul>\n  <li>···</li>\n</ul>\n\n<h3 id=\"niacin-vitamin-b3\">Niacin (Vitamin B3)</h3>\n\n<ul>\n  <li>···</li>\n</ul>\n\n<h3 id=\"vitamin-b6\">Vitamin B6</h3>\n\n<ul>\n  <li>···</li>\n</ul>\n\n<h3 id=\"vitamin-b12\">Vitamin B12</h3>\n\n<ul>\n  <li>···</li>\n</ul>\n\n<h3 id=\"potassium\">Potassium</h3>\n\n<ul>\n  <li>···</li>\n</ul>\n\n<h3 id=\"omega-3\">Omega 3</h3>\n\n<ul>\n  <li>···</li>\n</ul>\n\n<h3 id=\"calcium\">Calcium</h3>\n\n<ul>\n  <li>Sources: dairy</li>\n  <li>Dosage: 1000mg daily for adults</li>\n  <li>Major benefits: bone mass/strength</li>\n</ul>\n\n<p>See: <a href=\"http://ods.od.nih.gov/factsheets/calcium.asp\">nih.gov</a></p>\n\n<h3 id=\"iodine\">Iodine</h3>\n\n<ul>\n  <li>Sources: dairy (yogurt, milk, eggs)</li>\n  <li>Major benefits: thyroid gland regulation</li>\n</ul>\n\n<p>See: <a href=\"http://www.whfoods.com/genpage.php?tname=nutrient&amp;dbid=69\">whfoods.com</a></p>\n\n<h3 id=\"vitamin-a\">Vitamin A</h3>\n\n<ul>\n  <li>Sources: meat, poultry, fish, fruits, leafy veggies, orange veggies\n(squash/carrots)</li>\n  <li>Dosage: 10,000iu for adults</li>\n  <li>Major benefits: vision, immune boost, reproduction</li>\n  <li>Fat-soluble</li>\n</ul>\n\n<p>See: <a href=\"http://ods.od.nih.gov/factsheets/Vitam-HealthProfessional/\">nih.gov</a></p>\n\n<h3 id=\"iron\">Iron</h3>\n\n<ul>\n  <li>Sources: soybeans, nuts/beans/lentils, beef, whole grains</li>\n  <li>Major benefits: oxygen transport, energy metabolism</li>\n</ul>\n\n<p>See: <a href=\"http://www.whfoods.com/genpage.php?tname=nutrient&amp;dbid=70\">whfoods.com</a></p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "fitness/phat",
  "title": "Phat",
  "url": "/fitness/phat",
  "category": "Fitness",
  "keywords": null,
  "content_html": "<h3 id=\"day-1-upper-body-power\">Day 1: Upper Body Power</h3>\n\n<table class=\"-headers\">\n  <thead>\n    <tr>\n      <th>Purpose</th>\n      <th>Movement</th>\n      <th>Sets x Reps</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Pull: power</td>\n      <td>Bent over / Pendlay rows</td>\n      <td>3 x 3-5</td>\n    </tr>\n    <tr>\n      <td>Pull: assistance</td>\n      <td>Weighted Pull ups</td>\n      <td>2 x 6-10</td>\n    </tr>\n    <tr>\n      <td>Pull: auxiliary</td>\n      <td>Rack chins</td>\n      <td>2 x 6-10</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td>Press: power</td>\n      <td>Flat dumbbell presses</td>\n      <td>3 x 3-5</td>\n    </tr>\n    <tr>\n      <td>Press: assistance</td>\n      <td>Weighted dips</td>\n      <td>2 x 6-10</td>\n    </tr>\n    <tr>\n      <td>Press: assistance</td>\n      <td>Seated dumbbell shoulder presses</td>\n      <td>3 x 6-10</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td>Aux: curling</td>\n      <td>Cambered bar curls</td>\n      <td>3 x 6-10</td>\n    </tr>\n    <tr>\n      <td>Aux: extension</td>\n      <td>Skull crushers</td>\n      <td>3 x 6-10</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"day-2-lower-body-power\">Day 2: Lower Body Power</h3>\n\n<table class=\"-headers\">\n  <thead>\n    <tr>\n      <th>Purpose</th>\n      <th>Movement</th>\n      <th>Sets x Reps</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Press: Power</td>\n      <td>Squats</td>\n      <td>3 x 3-5</td>\n    </tr>\n    <tr>\n      <td>Press: Assistance</td>\n      <td>Hack Squats</td>\n      <td>2 x 6-10</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td>Ext: Assistance</td>\n      <td>Leg extensions</td>\n      <td>2 x 6-10</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td>Pull: Assistance</td>\n      <td>Stiff legged deadlifts</td>\n      <td>3 x 5-8</td>\n    </tr>\n    <tr>\n      <td>Pull: Assistance (curl)</td>\n      <td>Glute ham raises or lying leg curls</td>\n      <td>2 x 6-10</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td>Aux: calf</td>\n      <td>Standing calf raise</td>\n      <td>3 x 6-10</td>\n    </tr>\n    <tr>\n      <td>Aux: calf</td>\n      <td>Seated calf raise</td>\n      <td>2 x 6-10</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"day-4-upper-body-hypertrophy\">Day 4: Upper Body Hypertrophy</h3>\n\n<table class=\"-headers\">\n  <thead>\n    <tr>\n      <th>Purpose</th>\n      <th>Movement</th>\n      <th>Sets x Reps</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Pull: speed work</td>\n      <td>Bent over / Pendlay rows</td>\n      <td>6 x 3</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td>Pull</td>\n      <td>Rack chins</td>\n      <td>3 x 8-12</td>\n    </tr>\n    <tr>\n      <td>Pull</td>\n      <td>Seated cable row</td>\n      <td>3 x 8-12</td>\n    </tr>\n    <tr>\n      <td>Pull</td>\n      <td>Dumbbell rows / shrugs against incline bench</td>\n      <td>2 x 12-15</td>\n    </tr>\n    <tr>\n      <td>Pull</td>\n      <td>Close grip pulldowns</td>\n      <td>2 x 15-20</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td>Shoulder</td>\n      <td>Seated dumbbell presses</td>\n      <td>3 x 8-12</td>\n    </tr>\n    <tr>\n      <td>Shoulder</td>\n      <td>Upright rows</td>\n      <td>2 x 12-15</td>\n    </tr>\n    <tr>\n      <td>Shoulder</td>\n      <td>Side lateral raises with dumbbells or cables</td>\n      <td>3 x 12-20</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Speed work: with 65-70% of normal 3-5 rep max</p>\n\n<h3 id=\"day-5-lower-body-hypertrophy\">Day 5: Lower Body Hypertrophy</h3>\n\n<table class=\"-headers\">\n  <thead>\n    <tr>\n      <th>Purpose</th>\n      <th>Movement</th>\n      <th>Sets x Reps</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Legs: speed work</td>\n      <td>Squats</td>\n      <td>6 x 3</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td>Press</td>\n      <td>Hack squats</td>\n      <td>3 x 8-12</td>\n    </tr>\n    <tr>\n      <td>Press</td>\n      <td>Leg presses</td>\n      <td>2 x 12-15</td>\n    </tr>\n    <tr>\n      <td>Extension</td>\n      <td>Leg extensions</td>\n      <td>3 x 15-20</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td>Pull</td>\n      <td>Romanian deadlifts</td>\n      <td>3 x 8-12</td>\n    </tr>\n    <tr>\n      <td>Pull/curling</td>\n      <td>Lying leg curls</td>\n      <td>2 x 12-15</td>\n    </tr>\n    <tr>\n      <td>Pull/curling</td>\n      <td>Seated leg curls</td>\n      <td>2 x 15-20</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td>Calf</td>\n      <td>Donkey calf raises</td>\n      <td>4 x 10-15</td>\n    </tr>\n    <tr>\n      <td>Calf</td>\n      <td>Seated calf raises</td>\n      <td>3 x 15-20</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"day-6-chestarms-hypertrophy\">Day 6: Chest/Arms Hypertrophy</h3>\n\n<table class=\"-headers\">\n  <thead>\n    <tr>\n      <th>Purpose</th>\n      <th>Movement</th>\n      <th>Sets x Reps</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Press: speed work</td>\n      <td>Flat dumbbell presses</td>\n      <td>6 x 3</td>\n    </tr>\n    <tr>\n      <td>Press</td>\n      <td>Incline dumbbell presses</td>\n      <td>3 x 8-12</td>\n    </tr>\n    <tr>\n      <td>Press</td>\n      <td>Hammer strength chest press</td>\n      <td>3 x 12-15</td>\n    </tr>\n    <tr>\n      <td>Fly</td>\n      <td>Incline cable flyes</td>\n      <td>2 x 15-20</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td>Curl</td>\n      <td>Cambered bar preacher curls</td>\n      <td>3 x 8-12</td>\n    </tr>\n    <tr>\n      <td>Curl</td>\n      <td>Dumbbell concentration curls</td>\n      <td>2 x 12-15</td>\n    </tr>\n    <tr>\n      <td>Curl</td>\n      <td>Spider curls against incline bench</td>\n      <td>2 x 15-20</td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td>Extension</td>\n      <td>Seated tricep extension with cambered bar</td>\n      <td>3 x 8-12</td>\n    </tr>\n    <tr>\n      <td>Extension</td>\n      <td>Cable pressdowns with rope attachment</td>\n      <td>2 x 12-15</td>\n    </tr>\n    <tr>\n      <td>Extension</td>\n      <td>Cable kickbacks</td>\n      <td>2 x 15-20</td>\n    </tr>\n  </tbody>\n</table>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": "2017-08-30"
},{
  "id": "wip/php",
  "title": "PHP",
  "url": "/wip/php",
  "category": "PHP",
  "keywords": null,
  "content_html": "<h3 id=\"hello-world\">Hello world</h3>\n\n<h4 id=\"hellophp\">hello.php</h4>\n\n<pre><code class=\"language-php\">&lt;?php\nfunction greetMe($name): string\n{\n    return \"Hello, \" . $name . \"!\";\n}\n\n$message = greetMe($name);\necho $message;\n</code></pre>\n\n<p>All PHP files start with <code>&lt;?php</code>.</p>\n\n<p>See: <a href=\"https://php.net/manual/en/language.basic-syntax.phptags.php\">PHP tags</a></p>\n\n<h3 id=\"objects\">Objects</h3>\n\n<pre><code class=\"language-php\">&lt;?php\n\n$fruitsArray = array(\n    \"apple\" =&gt; 20,\n    \"banana\" =&gt; 30\n);\necho $fruitsArray['banana'];\n</code></pre>\n\n<p>Or cast as object</p>\n\n<pre><code class=\"language-php\">&lt;?php\n\n$fruitsObject = (object) $fruits;\necho $fruitsObject-&gt;banana;\n</code></pre>\n\n<h3 id=\"inspecting-objects\">Inspecting objects</h3>\n\n<pre><code class=\"language-php\">&lt;?php\nvar_dump($object)\n</code></pre>\n\n<p>Prints the contents of a variable for inspection.</p>\n\n<p>See: <a href=\"https://php.net/var_dump\">var_dump</a></p>\n\n<h3 id=\"classes\">Classes</h3>\n\n<pre><code class=\"language-php\">class Person\n{\n    public $name = '';\n}\n\n$person = new Person();\n$person-&gt;name = 'bob';\n\necho $person-&gt;name;\n</code></pre>\n\n<h3 id=\"getters-and-setters\">Getters and setters</h3>\n\n<pre><code class=\"language-php\">class Person \n{\n    private $name = '';\n\n    public function getName(): string\n    {\n        return $this-&gt;name;\n    }\n\n    public function setName(string $name)\n    {\n        $this-&gt;name = $name;\n        return $this;\n    }\n}\n\n$person = new Person();\n$person-&gt;setName('bob');\n\necho $person-&gt;getName();\n</code></pre>\n\n<h3 id=\"isset-vs-empty\">isset vs empty</h3>\n<pre><code class=\"language-php\">\n$options = [\n    'key' =&gt; 'value',\n    'blank' =&gt; '',\n    'nothing' =&gt; null,\n];\n\nvar_dump(isset($options['key']), empty($options['key'])); // true, false\nvar_dump(isset($options['blank']), empty($options['blank'])); // true, true\nvar_dump(isset($options['nothing']), empty($options['nothing'])); // false, true\n</code></pre>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "assets/css/style.css",
  "title": null,
  "url": "/assets/css/style.css",
  "category": "Others",
  "keywords": null,
  "content_html": "<p>@import “jekyll-theme-primer”;</p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "redirects.json",
  "title": null,
  "url": "/redirects.json",
  "category": "Others",
  "keywords": null,
  "content_html": "<p>{}</p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
}
]

